#! /usr/bin/env python
# encoding: utf-8
#*********************************************************************
# Copyright 2010, Institute of Computer and Network Engineering,
#                 TU-Braunschweig
# All rights reserved
# Any reproduction, use, distribution or disclosure of this program,
# without the express, prior written consent of the authors is 
# strictly prohibited.
#
# University of Technology Braunschweig
# Institute of Computer and Network Engineering
# Hans-Sommer-Str. 66
# 38118 Braunschweig, Germany
#
# ESA SPECIAL LICENSE
#
# This program may be freely used, copied, modified, and redistributed
# by the European Space Agency for the Agency's own requirements.
#
# The program is provided "as is", there is no warranty that
# the program is correct or suitable for any purpose,
# neither implicit nor explicit. The program and the information in it
# contained do not necessarily reflect the policy of the European 
# Space Agency or of TU-Braunschweig.
#*********************************************************************
# Title:      wscript
#
# ScssId:
#
# Origin:     HW-SW SystemC Co-Simulation SoC Validation Platform
#
# Purpose:    this file contains the build system for the mmu_cache
#             model and all its testbenches
#
# Method:     $ ./waf configure; ./waf # to build it on top level
#
# Modified on $Date$
#          at $Revision$
#          by $Author$
#
# Principal:  European Space Agency
# Author:     VLSI working group @ IDA @ TUBS
# Maintainer: Rolf Meyer
# Reviewed:
#*********************************************************************
top = '..'

def set_options(ctx):
  from os import environ
  gso = ctx.get_option_group("--amba")
  gso.add_option("--ambaexamples", dest="amba_examples", help="Basedir of your AMBAKit Examples", default=environ.get("AMBA_EXAMPLES",""))

def configure(ctx):
  from Options import options
  import os.path
  if options.amba_examples and options.amba_examples != "":
    ctx.env["CPPPATH_AMBAMEM"] = os.path.abspath(os.path.expanduser(os.path.expandvars(os.path.join(options.amba_examples, 'ahb_ct_timing'))))
  elif options.amba_home and options.amba_home != "":
    ctx.env["CPPPATH_AMBAMEM"] = os.path.abspath(os.path.expanduser(os.path.expandvars(os.path.join(options.amba_home, 'examples', 'ahb_ct_timing'))))
  else:
    ctx.env["CPPPATH_AMBAMEM"] = ''

  ctx.check_cxx(
    header_name  = 'ahb_simple_bus.h ahb_simple_slave.h',
    msg          = "Checking for AMBAKit Example Mem",
    mandatory    = True,
    uselib       = 'AMBAMEM AMBA GREENSOCS BOOST SYSC TLM2',
    uselib_store = 'AMBAMEM',
    fragment     = """
                   #ifdef DEBUG_AMBA
                   # define DUMP(name, msg) std::cout<<"@"<<sc_core::sc_time_stamp()<<" /"<<(unsigned)sc_core::sc_delta_count()<<" ("<<name  <<"): "<<msg<<std::endl
                   #else
                   # define DUMP(name, msg)
                   #endif

                   #include <ahb_simple_bus.h>
                   #include <ahb_simple_slave.h>
                   
                   int main(int argc, char *argv[]) {
                     return 0;
                   }
    """,
    execute      = False
  )

def build(bld):
  bld(
    target         = 'mmu_cache',
    features       = 'cxx cstaticlib',
    source         = [ 'lib/icio_payload_extension.cpp', 
                       'lib/dcio_payload_extension.cpp',
		       'lib/localram.cpp',
		       'lib/nocache.cpp',
		       'lib/vectorcache.cpp',
		       'lib/ivectorcache.cpp',
		       'lib/dvectorcache.cpp',
                       'lib/mmu.cpp', 
		       'lib/mmu_cache.cpp' ],
    export_incdirs = 'lib',
    uselib         = 'SYSC TLM2 AMBA GREENSOCS',
    uselib_local   = 'common',
  )

  bld(
    target       = 'lt_ct_default.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_default_test/testbench.cpp',
                     'lt_ct_default_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache common',
  )

  bld(
    target       = 'lt_ct_mmu.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_mmu_test/testbench.cpp',
                     'lt_ct_mmu_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache common',
  )

  bld(
    target       = 'lt_ct_localram.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_localram_test/testbench.cpp',
                     'lt_ct_localram_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache common',
  )

  bld(
    target       = 'lt_ct_cacheline.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_cacheline_test/testbench.cpp',
                     'lt_ct_cacheline_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache common',
  )

  bld(
    target       = 'lt_ct_lock.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_lock_test/testbench.cpp',
                     'lt_ct_lock_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache common',
  )

