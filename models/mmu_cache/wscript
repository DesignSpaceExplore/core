#! /usr/bin/env python
# encoding: utf-8
#*********************************************************************
# Copyright 2010, Institute of Computer and Network Engineering,
#                 TU-Braunschweig
# All rights reserved
# Any reproduction, use, distribution or disclosure of this program,
# without the express, prior written consent of the authors is 
# strictly prohibited.
#
# University of Technology Braunschweig
# Institute of Computer and Network Engineering
# Hans-Sommer-Str. 66
# 38118 Braunschweig, Germany
#
# ESA SPECIAL LICENSE
#
# This program may be freely used, copied, modified, and redistributed
# by the European Space Agency for the Agency's own requirements.
#
# The program is provided "as is", there is no warranty that
# the program is correct or suitable for any purpose,
# neither implicit nor explicit. The program and the information in it
# contained do not necessarily reflect the policy of the European 
# Space Agency or of TU-Braunschweig.
#*********************************************************************
# Title:      wscript
#
# ScssId:
#
# Origin:     HW-SW SystemC Co-Simulation SoC Validation Platform
#
# Purpose:    this file contains the build system for the mmu_cache
#             model and all its testbenches
#
# Method:     $ ./waf configure; ./waf # to build it on top level
#
# Modified on $Date$
#          at $Revision$
#          by $Author$
#
# Principal:  European Space Agency
# Author:     VLSI working group @ IDA @ TUBS
# Maintainer: Rolf Meyer
# Reviewed:
#*********************************************************************
top = '..'
vsim_conf = """
[Library]
modelsim = $GRLIB_TECH
grlib = $GRLIB_TECH/grlib
unisim = $GRLIB_TECH/unisim
dw02 = $GRLIB_TECH/dw02
synplify = $GRLIB_TECH/synplify
techmap = $GRLIB_TECH/techmap
spw = $GRLIB_TECH/spw
eth = $GRLIB_TECH/eth
opencores = $GRLIB_TECH/opencores
gaisler = $GRLIB_TECH/gaisler
esa = $GRLIB_TECH/esa
micron = $GRLIB_TECH/micron
vsys = $GRLIB_TECH/vsys
std = $MODEL_TECH/../std
ieee = $MODEL_TECH/../ieee
vital2000 = $MODEL_TECH/../vital2000
verilog = $MODEL_TECH/../verilog
std_developerskit = $MODEL_TECH/../std_developerskit
synopsys = $MODEL_TECH/../synopsys
work = %(path)s/%(target)s

[vcom]
VHDL93 = 1
Show_source = 1
Show_Warning1 = 0
Show_Warning5 = 0
Quiet = 1

[vlog]
Quiet = 1

[vsim]
VoptFlow = 0
Resolution = 1ps
UserTimeUnit = ns
RunLength = 100
IterationLimit = 5000
BreakOnAssertion = 3
DefaultRadix = symbolic
TranscriptFile = %(path)s/%(target)s.transcript.txt
PathSeparator = /
UnbufferedOutput = 0

[lmc]
libsm = $MODEL_TECH/libsm.sl
libhm = $MODEL_TECH/libhm.sl
"""

def options(ctx):
  from os import environ
  gso = ctx.get_option_group("--amba")
  gso.add_option("--ambaexamples", dest="amba_examples", help="Basedir of your AMBAKit Examples", default=environ.get("AMBA_EXAMPLES",""))

def configure(ctx):
  from waflib.Options import options
  import os.path
  '''
  amba_examples = ''
  if options.amba_examples and options.amba_examples != "":
    amba_examples = os.path.abspath(os.path.expanduser(os.path.expandvars(os.path.join(options.amba_examples, 'ahb_ct_timing'))))
  elif options.amba_home and options.amba_home != "":
    amba_examples = os.path.abspath(os.path.expanduser(os.path.expandvars(os.path.join(options.amba_home, 'examples', 'ahb_ct_timing'))))

  ctx.check_cxx(
    header_name  = 'ahb_simple_bus.h ahb_simple_slave.h',
    msg          = "Checking for AMBAKit Example Mem",
    mandatory    = True,
    uselib       = 'AMBAMEM AMBA GREENSOCS BOOST SYSTEMC TLM',
    uselib_store = 'AMBAMEM',
    includes     = amba_examples,
    fragment     = """
                   #ifdef DEBUG_AMBA
                   # define DUMP(name, msg) std::cout<<"@"<<sc_core::sc_time_stamp()<<" /"<<(unsigned)sc_core::sc_delta_count()<<" ("<<name  <<"): "<<msg<<std::endl
                   #else
                   # define DUMP(name, msg)
                   #endif

                   #include <ahb_simple_bus.h>
                   #include <ahb_simple_slave.h>
                   
                   int main(int argc, char *argv[]) {
                     return 0;
                   }
    """,
    execute      = False
  )
  '''
  
def build(bld):

  bld(
    target         = 'mmu_cache',
    features       = 'cxx cxxstlib',
    source         = [ 'lib/mmu_cache_test.cpp',
                       'lib/icio_payload_extension.cpp', 
                       'lib/dcio_payload_extension.cpp',
		       'lib/localram.cpp',
		       'lib/nocache.cpp',
		       'lib/vectorcache.cpp',
		       'lib/ivectorcache.cpp',
		       'lib/dvectorcache.cpp',
                       'lib/mmu.cpp', 
		       'lib/mmu_cache.cpp' ],
    export_includes = 'lib',
    uselib         = 'SYSTEMC TLM AMBA AMBAMEM GREENSOCS',
    use            = 'common utils',
  )

  bld(
    target       = 'mmu_cache.1.lt.test',
    features     = 'cxx cprogram test',
    source       = ['test1/testbench.cpp',
                    'test1/sim_lt/main.cpp'],
    includes     = '. ./lib ./test1',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.1.at.test',
    features     = 'cxx cprogram test',
    source       = ['test1/testbench.cpp',
                    'test1/sim_at/main.cpp'],
    includes     = '. ./lib ./test1',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )  

  bld(
    features     = 'modelsim',
    target       = 'mmu_cache.1.rtl.test',
    name         = 'mmu_cache.1.rtl.test',
    source       = ['./lib/typ_adapters.vhd',
                    'test1/sim_rtl/mmu_cache_wrapper.vhd',
                    '../../common/verbose.cpp',
                    '../../common/timingmonitor.cpp',
                    '../utils/power_monitor.cpp',
                    '../utils/ahbdevice.cpp',
                    '../utils/apbdevice.cpp',
                    '../utils/tb_ahb_mem.cpp',
                    '../utils/clock_gen.cpp',
                    './lib/icio_payload_extension.cpp',
                    './lib/dcio_payload_extension.cpp',
                    './lib/tlmcpu_rtlcache_transactor.cpp',
                    './lib/mmu_cache_test.cpp',
                    '../ahbctrl/adapters/ahbpipe.cpp',
                    '../ahbctrl/adapters/ahb_rtlmaster_tlmbus_transactor.cpp',
                    '../ahbctrl/ahbctrl.cpp',
                    'test1/testbench.cpp',
                    'test1/sim_rtl/main.cpp'],
    uselib       = 'AMBA GREENSOCS',
    includes     = './ ./test1 ./test1/sim_rtl ./lib ../utils ../../signalkit ../../common ../ahbctrl/ ../ahbctrl/adapters',
    config       =  vsim_conf,
  )

  bld(
    target       = 'mmu_cache.2.lt.test',
    features     = 'cxx cprogram test',
    source       = ['test2/testbench.cpp',
                    'test2/sim_lt/main.cpp'],
    includes     = '. ./lib ./test2',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.2.at.test',
    features     = 'cxx cprogram test',
    source       = ['test2/testbench.cpp',
                    'test2/sim_at/main.cpp'],
    includes     = '. ./lib ./test2',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    features     = 'modelsim',
    target       = 'mmu_cache.2.rtl.test',
    name         = 'mmu_cache.2.rtl.test',
    source       = ['./lib/typ_adapters.vhd',
                    'test2/sim_rtl/mmu_cache_wrapper.vhd',
                    '../../common/verbose.cpp',
                    '../../common/timingmonitor.cpp',
                    '../utils/ahbdevice.cpp',
                    '../utils/apbdevice.cpp',
                    '../utils/tb_ahb_mem.cpp',
                    '../utils/clock_gen.cpp',
                    './lib/icio_payload_extension.cpp',
                    './lib/dcio_payload_extension.cpp',
                    '../utils/cpu_lt_rtl_adapter.cpp',
                    '../ahbctrl/adapters/ahbpipe.cpp',
                    '../ahbctrl/adapters/ahb_rtlmaster_tlmbus_transactor.cpp',
                    '../ahbctrl/ahbctrl.cpp',
                    'test2/testbench.cpp',
                    'test2/sim_rtl/main.cpp'],
    uselib       = 'AMBA GREENSOCS',
    includes     = './ ./test2 ./test2/sim_rtl ./lib ../utils ../../signalkit ../../common ../ahbctrl/ ../ahbctrl/adapters',
    config       =  vsim_conf,
  )

  bld(
    target       = 'mmu_cache.3.lt.test',
    features     = 'cxx cprogram test',
    source       = ['test3/testbench.cpp',
                    'test3/sim_lt/main.cpp'],
    includes     = '. ./lib ./test3',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.3.at.test',
    features     = 'cxx cprogram test',
    source       = ['test3/testbench.cpp',
                    'test3/sim_at/main.cpp'],
    includes     = '. ./lib ./test3',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.4.lt.test',
    features     = 'cxx cprogram test',
    source       = ['test4/testbench.cpp',
                    'test4/sim_lt/main.cpp'],
    includes     = '. ./lib ./test4',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )
   
  bld(
    target       = 'mmu_cache.4.at.test',
    features     = 'cxx cprogram test',
    source       = ['test4/testbench.cpp',
                    'test4/sim_at/main.cpp'],
    includes     = '. ./lib ./test4',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.5.lt.test',
    features     = 'cxx cprogram test',
    source       = ['test5/testbench.cpp',
                    'test5/sim_lt/main.cpp'],
    includes     = '. ./lib ./test5',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.5.at.test',
    features     = 'cxx cprogram test',
    source       = ['test5/testbench.cpp',
                    'test5/sim_at/main.cpp'],
    includes     = '. ./lib ./test5',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

 
  bld(
    target       = 'mmu_cache.6.lt.test',
    features     = 'cxx cprogram test',
    source       = ['test6/testbench.cpp',
                    'test6/sim_lt/main.cpp'],
    includes     = '. ./lib ./test6',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  bld(
    target       = 'mmu_cache.6.at.test',
    features     = 'cxx cprogram test',
    source       = ['test6/testbench.cpp',
                    'test6/sim_at/main.cpp'],
    includes     = '. ./lib ./test6',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache ahbctrl common utils',
  )

  """
  bld(
    target       = 'mmu_cache.at.tlm.test',
    features     = 'cxx cprogram test',
    source       = ['test_at/testbench.cpp',
                    'test_at/main.cpp'],
    includes     = '. ./lib ./test_at',
    uselib       = 'SYSTEMC TLM AMBA GREENSOCS',
    use          = 'mmu_cache common utils',
  )
  """

