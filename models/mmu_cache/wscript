#! /usr/bin/env python
# encoding: utf-8
#***********************************************************************#
#* Project:    HW-SW SystemC Co-Simulation SoC Validation Platform     *#
#*                                                                     *#
#* File:       wscript                                                 *#
#*             this file contains the build system for the gptimer     *#
#*             tLM model and all its testbenches.                      *#
#*                                                                     *#
#* Modified on $Date: 2010-07-30 15:41:55 +0200 (Fri, 30 Jul 2010) $   *#
#*          at $Revision: 32 $                                         *#
#*                                                                     *#
#* Principal:  European Space Agency                                   *#
#* Author:     VLSI working group @ IDA @ TUBS                         *#
#* Maintainer: Rolf Meyer                                              *#
#***********************************************************************#

top = '..'

def set_options(ctx):
  from os import environ
  gso = ctx.add_option_group("GreenSoCs Options")
  gso.add_option("--ambaexamples", dest="amba_examples", help="Basedir of your AMBAKit Examples", default=environ.get("AMBA_EXAMPLES",""))

def configure(ctx):
  from Options import options
  import os.path
  if options.amba_examples and options.amba_examples != "":
    ctx.env["CPPPATH_AMBAMEM"] = os.path.join(options.amba_examples, 'ahb_ct_timing')
  elif options.amba_home and options.amba_home != "":
    ctx.env["CPPPATH_AMBAMEM"] = os.path.join(options.amba_home, 'examples', 'ahb_ct_timing')
  else:
    ctx.env["CPPPATH_AMBAMEM"] = ''

  ctx.check_cxx(
    header_name  = 'ahb_simple_bus.h ahb_simple_slave.h',
    msg          = "Checking for AMBAKit Example Mem",
    mandatory    = True,
    uselib       = 'AMBAMEM AMBA GREENSOCS BOOST SYSC TLM2',
    uselib_store = 'AMBAMEM',
    fragment     = """
                   #ifdef DEBUG_AMBA
                   # define DUMP(name, msg) std::cout<<"@"<<sc_core::sc_time_stamp()<<" /"<<(unsigned)sc_core::sc_delta_count()<<" ("<<name  <<"): "<<msg<<std::endl
                   #else
                   # define DUMP(name, msg)
                   #endif

                   #include <ahb_simple_bus.h>
                   #include <ahb_simple_slave.h>
                   
                   int main(int argc, char *argv) {
                     return 0;
                   }
    """,
    execute      = False
  )

def build(bld):
  bld(
    target         = 'mmu_cache',
    features       = 'cxx cstaticlib',
    source         = [ 'lib/icio_payload_extension.cpp', 
                       'lib/dcio_payload_extension.cpp',
		       'lib/localram.cpp', 
                       'lib/mmu.cpp', 
                       'lib/ivectorcache.cpp', 
                       'lib/dvectorcache.cpp' ],
    export_incdirs = 'lib',
    uselib         = 'SYSC TLM2 AMBA GREENSOCS',
  )

  bld(
    target       = 'lt_ct_default.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_default_test/testbench.cpp',
                     'lt_ct_default_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache',
  )

  bld(
    target       = 'lt_ct_mmu.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_mmu_test/testbench.cpp',
                     'lt_ct_mmu_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache',
  )

  bld(
    target       = 'lt_ct_localram.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_localram_test/testbench.cpp',
                     'lt_ct_localram_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache',
  )

  bld(
    target       = 'lt_ct_cacheline.test',
    features     = 'cxx cprogram test',
    source       = [ 'lt_ct_cacheline_test/testbench.cpp',
                     'lt_ct_cacheline_test/main.cpp'],
    includes     = '.',
    uselib       = 'SYSC TLM2 AMBA GREENSOCS AMBAMEM',
    uselib_local = 'mmu_cache',
  )

