#! /usr/bin/env python
# encoding: utf-8
#*********************************************************************
# Copyright 2010, Institute of Computer and Network Engineering,
#                 TU-Braunschweig
# All rights reserved
# Any reproduction, use, distribution or disclosure of this program,
# without the express, prior written consent of the authors is 
# strictly prohibited.
#
# University of Technology Braunschweig
# Institute of Computer and Network Engineering
# Hans-Sommer-Str. 66
# 38118 Braunschweig, Germany
#
# ESA SPECIAL LICENSE
#
# This program may be freely used, copied, modified, and redistributed
# by the European Space Agency for the Agency's own requirements.
#
# The program is provided "as is", there is no warranty that
# the program is correct or suitable for any purpose,
# neither implicit nor explicit. The program and the information in it
# contained do not necessarily reflect the policy of the European 
# Space Agency or of TU-Braunschweig.
#*********************************************************************
# Title:      wscript
#
# ScssId:
#
# Origin:     HW-SW SystemC Co-Simulation SoC Validation Platform
#
# Purpose:    this file contains the build system for the gptimer tlm
#             model and all its testbenches
#
# Method:     $ ./waf configure; ./waf # to build it on top level
#
# Modified on $Date$
#          at $Revision$
#          by $Author$
#
# Principal:  European Space Agency
# Author:     VLSI working group @ IDA @ TUBS
# Maintainer: Rolf Meyer
# Reviewed:
#*********************************************************************
top = '../..'
vsim_conf = """
[Library]
modelsim = $GRLIB_TECH
grlib = $GRLIB_TECH/grlib
unisim = $GRLIB_TECH/unisim
dw02 = $GRLIB_TECH/dw02
synplify = $GRLIB_TECH/synplify
techmap = $GRLIB_TECH/techmap
spw = $GRLIB_TECH/spw
eth = $GRLIB_TECH/eth
opencores = $GRLIB_TECH/opencores
gaisler = $GRLIB_TECH/gaisler
esa = $GRLIB_TECH/esa
micron = $GRLIB_TECH/micron
vsys = $GRLIB_TECH/vsys
std = $MODEL_TECH/../std
ieee = $MODEL_TECH/../ieee
vital2000 = $MODEL_TECH/../vital2000
verilog = $MODEL_TECH/../verilog
std_developerskit = $MODEL_TECH/../std_developerskit
synopsys = $MODEL_TECH/../synopsys
work = %(path)s/%(target)s

[vcom]
VHDL93 = 1
Show_source = 1
Show_Warning1 = 0
Show_Warning5 = 0
Quiet = 1

[vlog]
Quiet = 1

[vsim]
VoptFlow = 0
Resolution = 1ps
UserTimeUnit = ns
RunLength = 100
IterationLimit = 5000
BreakOnAssertion = 3
DefaultRadix = symbolic
TranscriptFile = %(path)s/%(target)s.transcript.txt
PathSeparator = /
UnbufferedOutput = 0

[lmc]
libsm = $MODEL_TECH/libsm.sl
libhm = $MODEL_TECH/libhm.sl
"""

def build(bld):
  bld(
    target          = 'gptimer',
    features        = 'cxx cxxstlib',
    source          = 'gptimer.cpp gpcounter.cpp', 
    export_includes = '.',
    uselib          = 'BOOST SYSTEMC TLM AMBA GREENSOCS',
    use             = 'common signalkit utils'
  )
  
  bld(
    target       = 'gptimer.1.lt.test',
    features     = 'cxx cprogram test',
    source       = ['tests/test1/top_lt.cpp',
                    'tests/test1/testbench.cpp'],
    includes     = '. tests/test1',
    uselib       = 'BOOST_PROGRAM_OPTIONS SYSTEMC TLM AMBA GREENSOCS',
    use          = 'gptimer utils signalkit common',
  )
  
  bld(
    target       = 'gptimer.1.rtl.test',
    features     = 'modelsim test',
    generate     = 'gptimer_wrapper:tests/test1/gptimer_wrapper.h',
    source       = ['tests/gptimer_wrapper.vhd',
                    'tests/test1/testbench.cpp',
                    'tests/test1/top_rtl.cpp',
                    '../../common/verbose.cpp'],
    uselib       = 'AMBA GREENSOCS',
    includes     = '. ./tests ./tests/test1 ../utils ../../signalkit ../../common',
    config       =  vsim_conf,
  )

  bld(
    target       = 'gptimer.2.lt.test',
    features     = 'cxx cprogram test',
    source       = ['tests/test2/top_lt.cpp',
                    'tests/test2/testbench.cpp'],
    includes     = '. tests/test2',
    uselib       = 'BOOST_PROGRAM_OPTIONS SYSTEMC TLM AMBA GREENSOCS',
    use          = 'gptimer utils signalkit common',
  )

  bld(
    target       = 'gptimer.2.rtl.test',
    features     = 'modelsim test',
    generate     = 'gptimer_wrapper:tests/test2/gptimer_wrapper.h',
    source       = ['tests/gptimer_wrapper.vhd',
                    'tests/test2/testbench.cpp',
                    'tests/test2/top_rtl.cpp',
                    '../../common/verbose.cpp'],
    uselib       = 'AMBA GREENSOCS',
    includes     = '. ./tests ./tests/test2 ../utils ../../signalkit ../../common',
    config       =  vsim_conf,
  )
  
  bld(
    target       = 'gptimer.3.lt.test',
    features     = 'cxx cprogram test',
    source       = ['tests/test3/top_lt.cpp',
                    'tests/test3/testbench.cpp'],
    includes     = '. tests/test3',
    uselib       = 'BOOST_PROGRAM_OPTIONS SYSTEMC TLM AMBA GREENSOCS',
    use          = 'gptimer utils signalkit common',
  )

  bld(
    target       = 'gptimer.3.rtl.test',
    features     = 'modelsim test',
    generate     = 'gptimer_wrapper:tests/test3/gptimer_wrapper.h',
    source       = ['tests/gptimer_wrapper.vhd',
                    'tests/test3/testbench.cpp',
                    'tests/test3/top_rtl.cpp',
                    '../../common/verbose.cpp'],
    uselib       = 'AMBA GREENSOCS',
    includes     = '. ./tests ./tests/test3 ../utils ../../signalkit ../../common',
    config       =  vsim_conf,
  )

