top = '..'

from waflib import Options, Context, Logs 
from waflib.Configure import ConfigurationContext
from tools.waf.common import configure as prep
import os

def contrib(self):
    path = os.path.join(self.bldnode.abspath(), "contrib.log")
    self.logger = Logs.make_logger(path, 'cfg')

    prep(self)
    self.find_program('cmake', var='CMAKE', mandatory=False, okmsg="ok")
    if "CMAKE" in self.env:
        import subprocess
        cmake_version_str = subprocess.check_output(["cmake", "--version"])
        cmake_version = [int(v) for v in cmake_version_str.split(" ")[2].split(".")]
        cmake_version = cmake_version[0] * 1000000 + cmake_version[1] * 10000 + cmake_version[2] * 100
    if not ("CMAKE" in self.env) or cmake_version < 2081101:
        
        self.build_dep(
            name    = "cmake",
            version = "2.8.12",
            tar_url = "http://www.cmake.org/files/v2.8/%(base)s.tar.gz",
            config_cmd = "%(src)s/bootstrap --prefix=%(prefix)s",
        )
        self.env.CMAKE = os.path.join(self.bldnode.abspath(), ".dist", "cmake-2.8.12", "bin", "cmake")


    self.build_dep(
        name    = "systemc",
        version = "2.3.0",
        git_url = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/systemc.git",
    )
    """
    self.build_dep(
        name    = "otf",
        version = "trunk",
        git_url = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/otf.git",
        config_cmd = "%(src)s/configure --prefix=%(prefix)s --without-zlib"
    )
    """
    """
    self.build_dep(
        name    = "cult",
        version = "trunk",
        git_url = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/cult.git",
        config_cmd = "%(cmake)s %%(src)s -DTARGET_ARCH=linux64 -DCULT_SUBLEVELS=10 "
                     "-DSYSTEMC_VERSION=2.3 -DSYSTEMC_HOME=%(systemc)s -DTLM_HOME=%(tlm)s/include "
                     "-DSYSTEMCTLM2_INCLUDE_DIR=%(tlm)s/include" % {
                         "cmake": self.env.CMAKE,
                         "systemc": self.env.SYSTEMC_HOME,
                         "tlm": self.env.TLM_INCLUDE
                         }
    )
    """

    
    ### GreenLib ###
    greenlib_commit = "1b42c6cf83f091b5a1608c2bbc8f428db5d82fa9"
    greenlib_repo = "git://git.greensocs.com/greenlib.git"
    greenlib_path = os.path.join(self.srcnode.abspath(), "contrib", "greenlib-repo")
    greenlib_patch = os.path.join(self.srcnode.abspath(), "contrib", "greenlib-2013-08-27.patch")
    greenlib_build = os.path.join(self.bldnode.abspath(), "contrib", "greenlib")

    if not os.path.isdir(greenlib_path):
        self.start_msg("Fetching GreenLib")
        self.cmd_and_log([self.env.GIT, "clone", greenlib_repo, greenlib_path], output=Context.BOTH)
        os.chdir(greenlib_path)
        self.cmd_and_log([self.env.GIT, "checkout", greenlib_commit], output=Context.BOTH)
        self.end_msg("Ok")

        self.start_msg("Patching GreenLib")
        self.cmd_and_log([self.env.PATCH, "-p1", "-i", greenlib_patch, "-d", greenlib_path], output=Context.BOTH)
        self.end_msg("Ok")
    else:
        self.msg("GreenLib", "Already fetched")

    if not os.path.isdir(greenlib_build):
        os.makedirs(greenlib_build)
        os.chdir(greenlib_build)
        self.start_msg("Compiling GreenLib")
        self.cmd_and_log([self.env.CMAKE, greenlib_path, "-DSYSTEMC_PREFIX=%s" % (sysc_path)], output=Context.BOTH)
        self.cmd_and_log(["make"], output=Context.BOTH)
        self.end_msg("Ok")

        self.start_msg("Symlinking GreenLib")
        greenlib_inc = os.path.join(greenlib_build, "include")

        if not os.path.isdir(greenlib_inc):
            os.mkdir(greenlib_inc)
        for sublib in ["greencontrol", "greenreg", "greenrouter", "greensignalbus", "greensignalsocket", "greensocket", "gsgpsocket"]:
            sublib_inc = os.path.join(greenlib_inc, sublib)
            sublib_src = os.path.join(greenlib_path, sublib, "include", sublib)
            if not os.path.exists(sublib_inc):
                os.symlink(sublib_src, sublib_inc)
        greenreg_lib = os.path.join(greenlib_build, "greenreg", "lib", "libgreenreg.a")
        greenreg_inclib = os.path.join(greenlib_inc, "greenreg", "libgreenreg.a")
        if os.path.isfile(greenreg_lib) and not os.path.islink(greenreg_inclib):
            os.symlink(greenreg_lib, greenreg_inclib)
        self.end_msg("Ok")
    else:
        self.msg("GreenLib", "Already build")

    ### TrapGen ###

    trap_repo = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/trapgen.git"
    trap_path = os.path.join(self.srcnode.abspath(), "contrib", "trap-gen-repo")
    trap_build = os.path.join(self.bldnode.abspath(), "contrib", "trap-gen-bld")
    trap_dist = os.path.join(self.bldnode.abspath(), "contrib", "trap-gen")

    if not os.path.isdir(trap_path):
        self.start_msg("Fetching TrapGen")
        self.cmd_and_log([self.env.GIT, "clone", trap_repo, trap_path], output=Context.BOTH)
        self.end_msg("Ok")
    else:
        self.msg("TrapGen", "Already fetched")

    if not os.path.isdir(trap_build):
        self.start_msg("Compiling Trapgen")
        os.chdir(trap_path)
        self.cmd_and_log(["./waf", "configure", "-o", trap_build, "--with-elf=%s" % (elf_dist), "--with-systemc=%s" % (sysc_path), "--prefix=%s" % (trap_dist)], output=Context.BOTH)
        self.cmd_and_log(["./waf"], output=Context.BOTH)
        self.cmd_and_log(["./waf", "install"], output=Context.BOTH)
        self.end_msg("Ok")
    else:
        self.msg("TrapGen", "Already build")

    amba_repo = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/ambakit.git"
    amba_path = os.path.join(self.srcnode.abspath(), "contrib", "amba_socket-repo")

    if not os.path.isdir(amba_path):
        self.start_msg("Fetching AmbaKit")
        self.cmd_and_log([self.env.GIT, "clone", amba_repo, amba_path], output=Context.BOTH)
        self.end_msg("Ok")
    else:
        self.msg("AmbaKit", "Already fetched")

    os.chdir(self.bldnode.abspath())

def build(self):
    pass
