top = '..'

from waflib import Options, Context, Logs 
from waflib.Configure import ConfigurationContext
import os

def contrib(ctx):
    path = os.path.join(ctx.bldnode.abspath(), "contrib.log")
    ctx.logger = Logs.make_logger(path, 'cfg')

    ### System C + TLM ###
    ctx.find_program('make', var='MAKE', mandatory=True, okmsg="ok")
    sysc_path = os.path.join(ctx.srcnode.abspath(), "contrib", "systemc-2.3.0")
    sysc_build = os.path.join(ctx.bldnode.abspath(), "contrib", "systemc-2.3.0")
    sysc_dist = os.path.join(ctx.bldnode.abspath(), "contrib", "systemc-2.3.0")
    if not os.path.isdir(sysc_build):
        os.makedirs(sysc_build)
    os.chdir(sysc_build)
    ctx.start_msg("Configure SystemC 2.3")
    ctx.cmd_and_log([os.path.join(sysc_path, "configure"), "--prefix=%s" % (sysc_dist)], output=Context.BOTH)
    ctx.end_msg("Ok")

    ctx.start_msg("Compile SystemC 2.3")
    ctx.cmd_and_log([ctx.env.MAKE], output=Context.BOTH)
    ctx.end_msg("Ok")

    ctx.start_msg("Install SystemC 2.3")
    ctx.cmd_and_log([ctx.env.MAKE, "install"], output=Context.BOTH)
    ctx.end_msg("Ok")

    ### GreenLib ###
    greenlib_commit = "1b42c6cf83f091b5a1608c2bbc8f428db5d82fa9"
    greenlib_repo = "git://git.greensocs.com/greenlib.git"
    greenlib_path = os.path.join(ctx.bldnode.abspath(), "contrib", "greenlib-repo")
    greenlib_patch = os.path.join(ctx.srcnode.abspath(), "contrib", "greenlib-2013-08-27.patch")
    greenlib_build = os.path.join(ctx.bldnode.abspath(), "contrib", "greenlib")

    if not os.path.isdir(greenlib_path):
        ctx.find_program('git', var='GIT', mandatory=True, okmsg="ok")
        ctx.find_program('patch', var='PATCH', mandatory=True, okmsg="ok")
        ctx.find_program('cmake', var='CMAKE', mandatory=True, okmsg="ok")

        ctx.start_msg("Fetching GreenLib")
        ctx.cmd_and_log([ctx.env.GIT, "clone", greenlib_repo, greenlib_path], output=Context.BOTH)
        os.chdir(greenlib_path)
        ctx.cmd_and_log([ctx.env.GIT, "checkout", greenlib_commit], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Patching GreenLib")
        ctx.cmd_and_log([ctx.env.PATCH, "-p1", "-i", greenlib_patch, "-d", greenlib_path], output=Context.BOTH)
        ctx.end_msg("Ok")

        if not os.path.isdir(greenlib_build):
            os.makedirs(greenlib_build)
        os.chdir(greenlib_build)
        ctx.start_msg("Compiling GreenLib")
        ctx.cmd_and_log([ctx.env.CMAKE, greenlib_path, "-DSYSTEMC_PREFIX=%s" % (sysc_path)], output=Context.BOTH)
        ctx.cmd_and_log(["make"], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Symlinking GreenLib")
        greenlib_inc = os.path.join(greenlib_build, "include")
        if not os.path.isdir(greenlib_inc):
            os.mkdir(greenlib_inc)
        for sublib in ["greencontrol", "greenreg", "greenrouter", "greensignalbus", "greensignalsocket", "greensocket", "gsgpsocket"]:
            sublib_inc = os.path.join(greenlib_inc, sublib)
            sublib_src = os.path.join(greenlib_path, sublib, "include", sublib)
            if not os.path.exists(sublib_inc):
                os.symlink(sublib_src, sublib_inc)
        greenreg_lib = os.path.join(greenlib_build, "greenreg", "lib", "libgreenreg.a")
        greenreg_inclib = os.path.join(greenlib_inc, "greenreg", "libgreenreg.a")
        if os.path.isfile(greenreg_lib) and not os.path.islink(greenreg_inclib):
            os.symlink(greenreg_lib, greenreg_inclib)
        ctx.end_msg("Ok")
    else:
        ctx.msg("GreenLib", "Already prepared")

    ctx.start_msg("Compiling Trapgen")
    trap_path = os.path.join(ctx.srcnode.abspath(), "contrib", "trap-gen-2012.07")
    trap_build = os.path.join(ctx.bldnode.abspath(), "contrib", "trap-gen-2012.07-bld")
    trap_dist = os.path.join(ctx.bldnode.abspath(), "contrib", "trap-gen-2012.07")
    os.chdir(trap_path)
    ctx.cmd_and_log(["./waf", "configure", "-o", trap_build, "--with-systemc=%s" % (sysc_path), "--prefix=%s" % (trap_dist)], output=Context.BOTH)
    ctx.cmd_and_log(["./waf"], output=Context.BOTH)
    ctx.cmd_and_log(["./waf", "install"], output=Context.BOTH)
    ctx.end_msg("Ok")
    os.chdir(ctx.bldnode.abspath())

def build(sself):
    pass
