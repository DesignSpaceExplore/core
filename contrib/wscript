top = '..'

from waflib import Options, Context, Logs 
from waflib.Configure import ConfigurationContext
import os

def contrib(ctx):
    path = os.path.join(ctx.bldnode.abspath(), "contrib.log")
    ctx.logger = Logs.make_logger(path, 'cfg')

    
    ctx.find_program('git', var='GIT', mandatory=True, okmsg="ok")
    ctx.find_program('patch', var='PATCH', mandatory=True, okmsg="ok")
    ctx.find_program('make', var='MAKE', mandatory=True, okmsg="ok")

    ctx.find_program('cmake', var='CMAKE', mandatory=False, okmsg="ok")
    if "CMAKE" in ctx.env:
        import subprocess
        cmake_version_str = subprocess.check_output(["cmake", "--version"])
        cmake_version = [int(v) for v in cmake_version_str.split(" ")[2].split(".")]
        cmake_version = cmake_version[0] * 1000000 + cmake_version[1] * 10000 + cmake_version[2] * 100
    if cmake_version < 2081101 or not ("CMAKE" in ctx.env.get):
        ctx.find_program('wget', var='WGET', mandatory=True, okmsg="ok")
        ctx.find_program('tar', var='TAR', mandatory=True, okmsg="ok")
        
        cmake_version = "2.8.12"
        cmake_down = "http://www.cmake.org/files/v2.8/cmake-%s.tar.gz" % (cmake_version)
        cmake_tar = os.path.join(ctx.srcnode.abspath(), "contrib", "cmake-%s.tar.gz" % (cmake_version))
        cmake_tar_cwd = os.path.join(ctx.srcnode.abspath(), "contrib")
        cmake_path = os.path.join(ctx.srcnode.abspath(), "contrib", "cmake-%s" % (cmake_version))
        cmake_build = os.path.join(ctx.bldnode.abspath(), "contrib", "cmake-%s" % (cmake_version))
        if not os.path.exists(cmake_tar):
            ctx.start_msg("Fetching CMake")
            ctx.cmd_and_log([ctx.env.WGET, cmake_down, cmake_tar], output=Context.BOTH, cwd=cmake_tar_cwd)
            ctx.end_msg("Ok")

        if not os.path.isdir(cmake_path):
            ctx.start_msg("Extracting CMake")
            ctx.cmd_and_log([ctx.env.TAR, "-xzf", cmake_tar], output=Context.BOTH, cwd=cmake_tar_cwd)
            ctx.end_msg("Ok")

        if not os.path.isdir(cmake_build):
            os.makedirs(cmake_build)
            os.chdir(cmake_path)
            ctx.start_msg("Configure CMake")
            ctx.cmd_and_log([os.path.join(cmake_path, "bootstrap"), "--prefix=%s" % (cmake_build)], output=Context.BOTH)
            ctx.end_msg("Ok")

            ctx.start_msg("Compile CMake 2.3")
            ctx.cmd_and_log([ctx.env.MAKE], output=Context.BOTH)
            ctx.end_msg("Ok")

            ctx.start_msg("Install CMake 2.3")
            ctx.cmd_and_log([ctx.env.MAKE, "install"], output=Context.BOTH)
            ctx.end_msg("Ok")
        else:
            ctx.msg("CMake", "Already build")
        ctx.env.CMAKE = os.path.join(cmake_build, "bin", "cmake")

    ### System C + TLM ###

    sysc_repo = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/systemc.git"
    sysc_path = os.path.join(ctx.srcnode.abspath(), "contrib", "systemc-repo")
    sysc_build = os.path.join(ctx.bldnode.abspath(), "contrib", "systemc")
    sysc_dist = os.path.join(ctx.bldnode.abspath(), "contrib", "systemc")

    if not os.path.isdir(sysc_path):
        ctx.start_msg("Fetching SystemC")
        ctx.cmd_and_log([ctx.env.GIT, "clone", sysc_repo, sysc_path], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("SystemC", "Already fetched")

    if not os.path.isdir(sysc_build):
        os.makedirs(sysc_build)
        os.chdir(sysc_build)
        ctx.start_msg("Configure SystemC 2.3")
        ctx.cmd_and_log([os.path.join(sysc_path, "configure"), "--prefix=%s" % (sysc_dist)], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Compile SystemC 2.3")
        ctx.cmd_and_log([ctx.env.MAKE], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Install SystemC 2.3")
        ctx.cmd_and_log([ctx.env.MAKE, "install"], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("SystemC", "Already build")

    otf_path = os.path.join(ctx.srcnode.abspath(), "contrib", "OTF")
    otf_build = os.path.join(ctx.bldnode.abspath(), "contrib", "otf_bld")
    otf_dist = os.path.join(ctx.bldnode.abspath(), "contrib", "otf")

    #if not os.path.isdir(otf_path):
    #    ctx.start_msg("Fetching OTF")
    #    ctx.cmd_and_log([ctx.env.GIT, "clone", otf_repo, otf_path], output=Context.BOTH)
    #    ctx.end_msg("Ok")
    #else:
    #    ctx.msg("OTF", "Already fetched")

    if not os.path.isdir(otf_build):
        os.makedirs(otf_build)
        os.chdir(otf_build)
        ctx.start_msg("Configure OTF")
        ctx.cmd_and_log([os.path.join(otf_path, "configure"), "--prefix=%s" % (otf_dist), "--without-zlib"], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Compile OTF")
        ctx.cmd_and_log([ctx.env.MAKE], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Install OTF")
        ctx.cmd_and_log([ctx.env.MAKE, "install"], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("OTF", "Already build")

    cult_path = os.path.join(ctx.srcnode.abspath(), "contrib", "cult")
    cult_build = os.path.join(ctx.bldnode.abspath(), "contrib", "cult")
    cult_dist = os.path.join(ctx.bldnode.abspath(), "contrib", "cult")

    #if not os.path.isdir(cult_path):
    #    ctx.start_msg("Fetching Cult")
    #    ctx.cmd_and_log([ctx.env.GIT, "clone", cult_repo, cult_path], output=Context.BOTH)
    #    ctx.end_msg("Ok")
    #else:
    #    ctx.msg("Cult", "Already fetched")

    if not os.path.isdir(cult_build):
        os.makedirs(cult_build)
        os.chdir(cult_build)
        ctx.start_msg("Configure Cult")
        ctx.cmd_and_log(
            [
                ctx.env.CMAKE, cult_path, 
	            "-DTARGET_ARCH=linux64", 
                "-DCULT_SUBLEVELS=10", 
                "-DSYSTEMC_VERSION=2.3", 
                "-DSYSTEMC_HOME=%s" % (sysc_dist),
                "-DTLM_HOME=%s/include" % (sysc_dist),
                "-DSYSTEMCTLM2_INCLUDE_DIR=%s/include" % (sysc_dist),
            ], 
            output=Context.BOTH
        )
        ctx.end_msg("Ok")

        ctx.start_msg("Compile Cult")
        ctx.cmd_and_log([ctx.env.MAKE], output=Context.BOTH)
        ctx.end_msg("Ok")

        #ctx.start_msg("Install Cult")
        #ctx.cmd_and_log([ctx.env.MAKE, "install"], output=Context.BOTH)
        #ctx.end_msg("Ok")
    else:
        ctx.msg("OTF", "Already build")


    ### GreenLib ###
    greenlib_commit = "1b42c6cf83f091b5a1608c2bbc8f428db5d82fa9"
    greenlib_repo = "git://git.greensocs.com/greenlib.git"
    greenlib_path = os.path.join(ctx.srcnode.abspath(), "contrib", "greenlib-repo")
    greenlib_patch = os.path.join(ctx.srcnode.abspath(), "contrib", "greenlib-2013-08-27.patch")
    greenlib_build = os.path.join(ctx.bldnode.abspath(), "contrib", "greenlib")

    if not os.path.isdir(greenlib_path):
        ctx.start_msg("Fetching GreenLib")
        ctx.cmd_and_log([ctx.env.GIT, "clone", greenlib_repo, greenlib_path], output=Context.BOTH)
        os.chdir(greenlib_path)
        ctx.cmd_and_log([ctx.env.GIT, "checkout", greenlib_commit], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Patching GreenLib")
        ctx.cmd_and_log([ctx.env.PATCH, "-p1", "-i", greenlib_patch, "-d", greenlib_path], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("GreenLib", "Already fetched")

    if not os.path.isdir(greenlib_build):
        os.makedirs(greenlib_build)
        os.chdir(greenlib_build)
        ctx.start_msg("Compiling GreenLib")
        ctx.cmd_and_log([ctx.env.CMAKE, greenlib_path, "-DSYSTEMC_PREFIX=%s" % (sysc_path)], output=Context.BOTH)
        ctx.cmd_and_log(["make"], output=Context.BOTH)
        ctx.end_msg("Ok")

        ctx.start_msg("Symlinking GreenLib")
        greenlib_inc = os.path.join(greenlib_build, "include")

        if not os.path.isdir(greenlib_inc):
            os.mkdir(greenlib_inc)
        for sublib in ["greencontrol", "greenreg", "greenrouter", "greensignalbus", "greensignalsocket", "greensocket", "gsgpsocket"]:
            sublib_inc = os.path.join(greenlib_inc, sublib)
            sublib_src = os.path.join(greenlib_path, sublib, "include", sublib)
            if not os.path.exists(sublib_inc):
                os.symlink(sublib_src, sublib_inc)
        greenreg_lib = os.path.join(greenlib_build, "greenreg", "lib", "libgreenreg.a")
        greenreg_inclib = os.path.join(greenlib_inc, "greenreg", "libgreenreg.a")
        if os.path.isfile(greenreg_lib) and not os.path.islink(greenreg_inclib):
            os.symlink(greenreg_lib, greenreg_inclib)
        ctx.end_msg("Ok")
    else:
        ctx.msg("GreenLib", "Already build")

    ### TrapGen ###

    trap_repo = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/trapgen.git"
    trap_path = os.path.join(ctx.srcnode.abspath(), "contrib", "trap-gen-repo")
    trap_build = os.path.join(ctx.bldnode.abspath(), "contrib", "trap-gen-bld")
    trap_dist = os.path.join(ctx.bldnode.abspath(), "contrib", "trap-gen")

    if not os.path.isdir(trap_path):
        ctx.start_msg("Fetching TrapGen")
        ctx.cmd_and_log([ctx.env.GIT, "clone", trap_repo, trap_path], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("TrapGen", "Already fetched")

    if not os.path.isdir(trap_build):
        ctx.start_msg("Compiling Trapgen")
        os.chdir(trap_path)
        ctx.cmd_and_log(["./waf", "configure", "-o", trap_build, "--with-systemc=%s" % (sysc_path), "--prefix=%s" % (trap_dist)], output=Context.BOTH)
        ctx.cmd_and_log(["./waf"], output=Context.BOTH)
        ctx.cmd_and_log(["./waf", "install"], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("TrapGen", "Already build")

    amba_repo = "git@brauhaus.c3e.cs.tu-bs.de:socrocket/ambakit.git"
    amba_path = os.path.join(ctx.srcnode.abspath(), "contrib", "amba_socket-repo")

    if not os.path.isdir(amba_path):
        ctx.start_msg("Fetching AmbaKit")
        ctx.cmd_and_log([ctx.env.GIT, "clone", amba_repo, amba_path], output=Context.BOTH)
        ctx.end_msg("Ok")
    else:
        ctx.msg("AmbaKit", "Already fetched")

    os.chdir(ctx.bldnode.abspath())

def build(self):
    pass
